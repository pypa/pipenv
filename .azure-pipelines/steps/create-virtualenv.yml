steps:

- powershell: |
    $env:PY_EXE=$(python -c "import sys; print(sys.executable)")
    if (!$env:PY_EXE) {
        $env:PY_EXE="python"
    }
    Write-Host "##vso[task.setvariable variable=PY_EXE]$env:PY_EXE"
    Write-Host "Found Python: $env:PY_EXE"
    Invoke-Expression "& '$env:PY_EXE' -m virtualenv D:\.venv"
    Write-Host "##vso[task.setvariable variable=VIRTUAL_ENV]D:\.venv"
    Invoke-Expression "& 'D:\.venv\Scripts\activate.ps1'"
    $env:VIRTUAL_ENV="D:\.venv"
    Write-Host "Installing local package..."
    Invoke-Expression "& '$env:PY_EXE' -m pip install -e .[test] --upgrade"
    Write-Host "upgrading local package in virtual env"
    $venv_scripts = Join-Path -path D:\.venv -childpath Scripts
    $venv_py = Join-Path -path $venv_scripts -childpath python.exe
    Write-Host "##vso[task.setvariable variable=VIRTUAL_ENV_PY]$venv_py"
    Invoke-Expression "& '$venv_py' -m pip install -e .[test] --upgrade"
    Write-Host "Installing pipenv development packages"
    Invoke-Expression "& '$venv_py' -m pipenv install --dev"
    Write-Host "Installing local package in pipenv environment"
    Invoke-Expression "& '$venv_py' -m pipenv run pip install -e .[test]"
    Write-Host "Printing metadata"
    Write-Host $(Invoke-Expression "& '$venv_py' -m pipenv --venv")
    Write-Host $(Invoke-Expression "& '$venv_py' -m pipenv --py")
    Write-Host $(Invoke-Expression "& '$venv_py' -m pipenv run python --version")
  displayName: Make Virtualenv
  env:
    PIPENV_DEFAULT_PYTHON_VERSION: $(PIPENV_DEFAULT_PYTHON_VERSION)
