diff --git a/pipenv/vendor/yaspin/core.py b/pipenv/vendor/yaspin/core.py
index b6d5d9d1..a215a46f 100644
--- a/pipenv/vendor/yaspin/core.py
+++ b/pipenv/vendor/yaspin/core.py
@@ -20,12 +20,17 @@ import sys
 import threading
 import time
 
+import colorama
+from pipenv.vendor.vistir import cursor
+
 from .base_spinner import default_spinner
 from .compat import PY2, basestring, builtin_str, bytes, iteritems, str
 from .constants import COLOR_ATTRS, COLOR_MAP, ENCODING, SPINNER_ATTRS
 from .helpers import to_unicode
 from .termcolor import colored
 
+colorama.init()
+
 
 class Yaspin(object):
     """Implements a context manager that spawns a thread
@@ -394,11 +399,14 @@ class Yaspin(object):
         # SIGKILL cannot be caught or ignored, and the receiving
         # process cannot perform any clean-up upon receiving this
         # signal.
-        if signal.SIGKILL in self._sigmap.keys():
-            raise ValueError(
-                "Trying to set handler for SIGKILL signal. "
-                "SIGKILL cannot be cought or ignored in POSIX systems."
-            )
+        try:
+            if signal.SIGKILL in self._sigmap.keys():
+                raise ValueError(
+                    "Trying to set handler for SIGKILL signal. "
+                    "SIGKILL cannot be cought or ignored in POSIX systems."
+                )
+        except AttributeError:
+            pass
 
         for sig, sig_handler in iteritems(self._sigmap):
             # A handler for a particular signal, once set, remains
@@ -543,14 +551,12 @@ class Yaspin(object):
 
     @staticmethod
     def _hide_cursor():
-        sys.stdout.write("\033[?25l")
-        sys.stdout.flush()
+        cursor.hide_cursor()
 
     @staticmethod
     def _show_cursor():
-        sys.stdout.write("\033[?25h")
-        sys.stdout.flush()
+        cursor.show_cursor()
 
     @staticmethod
     def _clear_line():
-        sys.stdout.write("\033[K")
+        sys.stdout.write(chr(27) + "[K")
