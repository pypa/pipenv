diff --git a/pipenv/patched/pip/_internal/build_env.py b/src/pip/_internal/build_env.py
index daeb7fbc8..88482908b 100644
--- a/pipenv/patched/pip/_internal/build_env.py
+++ b/pipenv/patched/pip/_internal/build_env.py
@@ -216,8 +216,9 @@ class BuildEnvironment:
         *,
         kind: str,
     ) -> None:
+        sys_executable = os.environ.get('PIP_PYTHON_PATH', sys.executable)
         args: List[str] = [
-            sys.executable,
+            sys_executable,
             pip_runnable,
             "install",
             "--ignore-installed",
diff --git a/pipenv/patched/pip/_internal/commands/__init__.py b/src/pip/_internal/commands/__init__.py
index c72f24f30..df5defb16 100644
--- a/pipenv/patched/pip/_internal/commands/__init__.py
+++ b/pipenv/patched/pip/_internal/commands/__init__.py
@@ -19,82 +19,82 @@ CommandInfo = namedtuple("CommandInfo", "module_path, class_name, summary")
 # `commands_dict` in test setup / teardown).
 commands_dict: Dict[str, CommandInfo] = {
     "install": CommandInfo(
-        "pip._internal.commands.install",
+        "pipenv.patched.notpip._internal.commands.install",
         "InstallCommand",
         "Install packages.",
     ),
     "download": CommandInfo(
-        "pip._internal.commands.download",
+        "pipenv.patched.notpip._internal.commands.download",
         "DownloadCommand",
         "Download packages.",
     ),
     "uninstall": CommandInfo(
-        "pip._internal.commands.uninstall",
+        "pipenv.patched.notpip._internal.commands.uninstall",
         "UninstallCommand",
         "Uninstall packages.",
     ),
     "freeze": CommandInfo(
-        "pip._internal.commands.freeze",
+        "pipenv.patched.notpip._internal.commands.freeze",
         "FreezeCommand",
         "Output installed packages in requirements format.",
     ),
     "list": CommandInfo(
-        "pip._internal.commands.list",
+        "pipenv.patched.notpip._internal.commands.list",
         "ListCommand",
         "List installed packages.",
     ),
     "show": CommandInfo(
-        "pip._internal.commands.show",
+        "pipenv.patched.notpip._internal.commands.show",
         "ShowCommand",
         "Show information about installed packages.",
     ),
     "check": CommandInfo(
-        "pip._internal.commands.check",
+        "pipenv.patched.notpip._internal.commands.check",
         "CheckCommand",
         "Verify installed packages have compatible dependencies.",
     ),
     "config": CommandInfo(
-        "pip._internal.commands.configuration",
+        "pipenv.patched.notpip._internal.commands.configuration",
         "ConfigurationCommand",
         "Manage local and global configuration.",
     ),
     "search": CommandInfo(
-        "pip._internal.commands.search",
+        "pipenv.patched.notpip._internal.commands.search",
         "SearchCommand",
         "Search PyPI for packages.",
     ),
     "cache": CommandInfo(
-        "pip._internal.commands.cache",
+        "pipenv.patched.notpip._internal.commands.cache",
         "CacheCommand",
         "Inspect and manage pip's wheel cache.",
     ),
     "index": CommandInfo(
-        "pip._internal.commands.index",
+        "pipenv.patched.notpip._internal.commands.index",
         "IndexCommand",
         "Inspect information available from package indexes.",
     ),
     "wheel": CommandInfo(
-        "pip._internal.commands.wheel",
+        "pipenv.patched.notpip._internal.commands.wheel",
         "WheelCommand",
         "Build wheels from your requirements.",
     ),
     "hash": CommandInfo(
-        "pip._internal.commands.hash",
+        "pipenv.patched.notpip._internal.commands.hash",
         "HashCommand",
         "Compute hashes of package archives.",
     ),
     "completion": CommandInfo(
-        "pip._internal.commands.completion",
+        "pipenv.patched.notpip._internal.commands.completion",
         "CompletionCommand",
         "A helper command used for command completion.",
     ),
     "debug": CommandInfo(
-        "pip._internal.commands.debug",
+        "pipenv.patched.notpip._internal.commands.debug",
         "DebugCommand",
         "Show information useful for debugging.",
     ),
     "help": CommandInfo(
-        "pip._internal.commands.help",
+        "pipenv.patched.notpip._internal.commands.help",
         "HelpCommand",
         "Show help for commands.",
     ),
diff --git a/pipenv/patched/pip/_internal/index/package_finder.py b/src/pip/_internal/index/package_finder.py
index 223d06df6..dd5283c7f 100644
--- a/pipenv/patched/pip/_internal/index/package_finder.py
+++ b/pipenv/patched/pip/_internal/index/package_finder.py
@@ -114,6 +114,7 @@ class LinkEvaluator:
         target_python: TargetPython,
         allow_yanked: bool,
         ignore_requires_python: Optional[bool] = None,
+        ignore_compatibility: Optional[bool] = None,
     ) -> None:
         """
         :param project_name: The user supplied package name.
@@ -131,9 +132,13 @@ class LinkEvaluator:
         :param ignore_requires_python: Whether to ignore incompatible
             PEP 503 "data-requires-python" values in HTML links. Defaults
             to False.
+        :param ignore_compatibility: Whether to ignore
+            compatibility of python versions and allow all versions of packages.
         """
         if ignore_requires_python is None:
             ignore_requires_python = False
+        if ignore_compatibility is None:
+            ignore_compatibility = True

         self._allow_yanked = allow_yanked
         self._canonical_name = canonical_name
@@ -142,6 +147,7 @@ class LinkEvaluator:
         self._target_python = target_python

         self.project_name = project_name
+        self._ignore_compatibility = ignore_compatibility

     def evaluate_link(self, link: Link) -> Tuple[bool, Optional[str]]:
         """
@@ -166,10 +172,10 @@ class LinkEvaluator:
                 return (False, "not a file")
             if ext not in SUPPORTED_EXTENSIONS:
                 return (False, f"unsupported archive format: {ext}")
-            if "binary" not in self._formats and ext == WHEEL_EXTENSION:
+            if "binary" not in self._formats and ext == WHEEL_EXTENSION and not self._ignore_compatibility:
                 reason = "No binaries permitted for {}".format(self.project_name)
                 return (False, reason)
-            if "macosx10" in link.path and ext == ".zip":
+            if "macosx10" in link.path and ext == '.zip' and not self._ignore_compatibility:
                 return (False, "macosx10 one")
             if ext == WHEEL_EXTENSION:
                 try:
@@ -181,7 +187,7 @@ class LinkEvaluator:
                     return (False, reason)

                 supported_tags = self._target_python.get_tags()
-                if not wheel.supported(supported_tags):
+                if not wheel.supported(supported_tags) and not self._ignore_compatibility:
                     # Include the wheel's tags in the reason string to
                     # simplify troubleshooting compatibility issues.
                     file_tags = wheel.get_formatted_file_tags()
@@ -221,7 +227,7 @@ class LinkEvaluator:
             version_info=self._target_python.py_version_info,
             ignore_requires_python=self._ignore_requires_python,
         )
-        if not supports_python:
+        if not supports_python and not self._ignore_compatibility:
             # Return None for the reason text to suppress calling
             # _log_skipped_link().
             return (False, None)
@@ -469,7 +475,10 @@ class CandidateEvaluator:

         return sorted(filtered_applicable_candidates, key=self._sort_key)

-    def _sort_key(self, candidate: InstallationCandidate) -> CandidateSortingKey:
+    def _sort_key(
+        self, candidate: InstallationCandidate,
+        ignore_compatibility: bool = True
+    ) -> CandidateSortingKey:
         """
         Function to pass as the `key` argument to a call to sorted() to sort
         InstallationCandidates by preference.
@@ -514,10 +523,13 @@ class CandidateEvaluator:
                     )
                 )
             except ValueError:
-                raise UnsupportedWheel(
-                    "{} is not a supported wheel for this platform. It "
-                    "can't be sorted.".format(wheel.filename)
-                )
+                if not ignore_compatibility:
+                    raise UnsupportedWheel(
+                        "{} is not a supported wheel for this platform. It "
+                        "can't be sorted.".format(wheel.filename)
+                    )
+                pri = -(support_num)
+
             if self._prefer_binary:
                 binary_preference = 1
             if wheel.build_tag is not None:
@@ -584,6 +596,7 @@ class PackageFinder:
         format_control: Optional[FormatControl] = None,
         candidate_prefs: Optional[CandidatePreferences] = None,
         ignore_requires_python: Optional[bool] = None,
+        ignore_compatibility: Optional[bool] = False
     ) -> None:
         """
         This constructor is primarily meant to be used by the create() class
@@ -605,6 +618,7 @@ class PackageFinder:
         self._ignore_requires_python = ignore_requires_python
         self._link_collector = link_collector
         self._target_python = target_python
+        self._ignore_compatibility = ignore_compatibility
         self._use_deprecated_html5lib = use_deprecated_html5lib

         self.format_control = format_control
@@ -701,6 +715,7 @@ class PackageFinder:
             target_python=self._target_python,
             allow_yanked=self._allow_yanked,
             ignore_requires_python=self._ignore_requires_python,
+            ignore_compatibility=self._ignore_compatibility
         )

     def _sort_links(self, links: Iterable[Link]) -> List[Link]:
diff --git a/pipenv/patched/pip/_internal/req/req_install.py b/src/pip/_internal/req/req_install.py
index 02dbda194..72ab5c1dc 100644
--- a/pipenv/patched/pip/_internal/req/req_install.py
+++ b/pipenv/patched/pip/_internal/req/req_install.py
@@ -474,6 +474,7 @@ class InstallRequirement:
             self.unpacked_source_directory,
             backend,
             backend_path=backend_path,
+            python_executable=os.getenv('PIP_PYTHON_PATH', sys.executable)
         )

     def isolated_editable_sanity_check(self) -> None:
diff --git a/pipenv/patched/pip/_vendor/requests/packages.py b/src/pip/_vendor/requests/packages.py
index 9582fa730..5fb6f07df 100644
--- a/pipenv/patched/pip/_vendor/requests/packages.py
+++ b/pipenv/patched/pip/_vendor/requests/packages.py
@@ -4,13 +4,13 @@ import sys
 # I don't like it either. Just look the other way. :)

 for package in ('urllib3', 'idna', 'chardet'):
-    vendored_package = "pip._vendor." + package
+    vendored_package = "pipenv.patched.notpip._vendor." + package
     locals()[package] = __import__(vendored_package)
     # This traversal is apparently necessary such that the identities are
     # preserved (requests.packages.urllib3.* is urllib3.*)
     for mod in list(sys.modules):
         if mod == vendored_package or mod.startswith(vendored_package + '.'):
-            unprefixed_mod = mod[len("pip._vendor."):]
-            sys.modules['pip._vendor.requests.packages.' + unprefixed_mod] = sys.modules[mod]
+            unprefixed_mod = mod[len("pipenv.patched.notpip._vendor."):]
+            sys.modules['pipenv.patched.notpip._vendor.requests.packages.' + unprefixed_mod] = sys.modules[mod]

 # Kinda cool, though, right?
