diff --git a/pipenv/patched/piptools/_compat/__init__.py b/pipenv/patched/piptools/_compat/__init__.py
index fda80d5..4f7efbf 100644
--- a/pipenv/patched/piptools/_compat/__init__.py
+++ b/pipenv/patched/piptools/_compat/__init__.py
@@ -4,7 +4,37 @@ from __future__ import absolute_import, division, print_function, unicode_litera
 
 import six
 
-from .pip_compat import PIP_VERSION, parse_requirements
+from .pip_compat import (
+    DEV_PKGS,
+    FAVORITE_HASH,
+    PIP_VERSION,
+    FormatControl,
+    InstallationCandidate,
+    InstallCommand,
+    InstallationError,
+    InstallRequirement,
+    Link,
+    PackageFinder,
+    PyPI,
+    RequirementSet,
+    RequirementTracker,
+    Resolver,
+    SafeFileCache,
+    VcsSupport,
+    Wheel,
+    WheelCache,
+    cmdoptions,
+    get_installed_distributions,
+    install_req_from_editable,
+    install_req_from_line,
+    parse_requirements,
+    path_to_url,
+    pip_version,
+    stdlib_pkgs,
+    url_to_path,
+    user_cache_dir,
+    normalize_path,
+)
 
 if six.PY2:
     from .tempfile import TemporaryDirectory
diff --git a/pipenv/patched/piptools/_compat/pip_compat.py b/pipenv/patched/piptools/_compat/pip_compat.py
index 9508b75..ea51421 100644
--- a/pipenv/patched/piptools/_compat/pip_compat.py
+++ b/pipenv/patched/piptools/_compat/pip_compat.py
@@ -1,22 +1,72 @@
 # -*- coding=utf-8 -*-
 from __future__ import absolute_import
+import importlib
+import os
+from appdirs import user_cache_dir
+os.environ["PIP_SHIMS_BASE_MODULE"] = str("pipenv.patched.notpip")
+import pip_shims.shims
+from pip_shims.models import ShimmedPathCollection, ImportTypes
 
-import pip
-from pip._internal.req import parse_requirements as _parse_requirements
-from pip._vendor.packaging.version import parse as parse_version
+InstallationCandidate = ShimmedPathCollection("InstallationCandidate", ImportTypes.CLASS)
+InstallationCandidate.create_path("models.candidate", "18.0", "9999")
+InstallationCandidate.create_path("index", "7.0.3", "10.9.9")
 
-PIP_VERSION = tuple(map(int, parse_version(pip.__version__).base_version.split(".")))
+PIP_VERSION = tuple(map(int, pip_shims.shims.parsed_pip_version.parsed_version.base_version.split(".")))
 
+RequirementTracker = pip_shims.shims.RequirementTracker
 
-if PIP_VERSION[:2] <= (20, 0):
+def do_import(module_path, subimport=None, old_path=None):
+    old_path = old_path or module_path
+    pip_path = os.environ.get("PIP_SHIMS_BASE_MODULE", "pip")
+    prefixes = ["{}._internal".format(pip_path), pip_path]
+    paths = [module_path, old_path]
+    search_order = [
+        "{0}.{1}".format(p, pth) for p in prefixes for pth in paths if pth is not None
+    ]
+    package = subimport if subimport else None
+    for to_import in search_order:
+        if not subimport:
+            to_import, _, package = to_import.rpartition(".")
+        try:
+            imported = importlib.import_module(to_import)
+        except ImportError:
+            continue
+        else:
+            return getattr(imported, package)
 
+if PIP_VERSION[:2] <= (20, 0):
     def install_req_from_parsed_requirement(req, **kwargs):
         return req
 
-
 else:
-    from pip._internal.req.constructors import install_req_from_parsed_requirement
+    from pipenv.patched.notpip._internal.req.constructors import install_req_from_parsed_requirement
 
+InstallRequirement = pip_shims.shims.InstallRequirement
+InstallationError = pip_shims.shims.InstallationError
+parse_requirements = pip_shims.shims.parse_requirements
+RequirementSet = pip_shims.shims.RequirementSet
+SafeFileCache = pip_shims.shims.SafeFileCache
+FAVORITE_HASH = pip_shims.shims.FAVORITE_HASH
+path_to_url = pip_shims.shims.path_to_url
+url_to_path = pip_shims.shims.url_to_path
+PackageFinder = pip_shims.shims.PackageFinder
+FormatControl = pip_shims.shims.FormatControl
+InstallCommand = pip_shims.shims.InstallCommand
+Wheel = pip_shims.shims.Wheel
+cmdoptions = pip_shims.shims.cmdoptions
+get_installed_distributions = pip_shims.shims.get_installed_distributions
+PyPI = pip_shims.shims.PyPI
+stdlib_pkgs = pip_shims.shims.stdlib_pkgs
+DEV_PKGS = pip_shims.shims.DEV_PKGS
+Link = pip_shims.shims.Link
+Session = do_import("_vendor.requests.sessions", "Session")
+Resolver = pip_shims.shims.Resolver
+VcsSupport = pip_shims.shims.VcsSupport
+WheelCache = pip_shims.shims.WheelCache
+pip_version = pip_shims.shims.pip_version
+normalize_path = do_import("utils.misc", "normalize_path")
+install_req_from_line = pip_shims.shims.install_req_from_line
+install_req_from_editable = pip_shims.shims.install_req_from_editable
 
 def parse_requirements(
     filename, session, finder=None, options=None, constraint=False, isolated=False
diff --git a/pipenv/patched/piptools/cache.py b/pipenv/patched/piptools/cache.py
index 9b6bf55..983ddb6 100644
--- a/pipenv/patched/piptools/cache.py
+++ b/pipenv/patched/piptools/cache.py
@@ -6,7 +6,7 @@ import os
 import platform
 import sys
 
-from pip._vendor.packaging.requirements import Requirement
+from pipenv.vendor.packaging.requirements import Requirement
 
 from .exceptions import PipToolsError
 from .utils import as_tuple, key_from_req, lookup_table
diff --git a/pipenv/patched/piptools/locations.py b/pipenv/patched/piptools/locations.py
index 9ca0ffe..36cc538 100644
--- a/pipenv/patched/piptools/locations.py
+++ b/pipenv/patched/piptools/locations.py
@@ -1,12 +1,15 @@
 import os
 from shutil import rmtree
 
-from pip._internal.utils.appdirs import user_cache_dir
+from ._compat import user_cache_dir
 
 from .click import secho
 
-# The user_cache_dir helper comes straight from pip itself
-CACHE_DIR = user_cache_dir("pip-tools")
+# The user_cache_dir helper comes straight from pipenv.patched.notpip itself
+try:
+    from pipenv.environments import PIPENV_CACHE_DIR as CACHE_DIR
+except ImportError:
+    CACHE_DIR = user_cache_dir("pipenv")
 
 # NOTE
 # We used to store the cache dir under ~/.pip-tools, which is not the
diff --git a/pipenv/patched/piptools/repositories/local.py b/pipenv/patched/piptools/repositories/local.py
index ec3a796..1aa29f0 100644
--- a/pipenv/patched/piptools/repositories/local.py
+++ b/pipenv/patched/piptools/repositories/local.py
@@ -3,9 +3,7 @@ from __future__ import absolute_import, division, print_function, unicode_litera
 
 from contextlib import contextmanager
 
-from pip._internal.utils.hashes import FAVORITE_HASH
-
-from .._compat import PIP_VERSION
+from .._compat import PIP_VERSION, FAVORITE_HASH
 from .base import BaseRepository
 
 from piptools.utils import as_tuple, key_from_ireq, make_install_requirement
@@ -65,7 +63,8 @@ class LocalRequirementsRepository(BaseRepository):
         if existing_pin and ireq_satisfied_by_existing_pin(ireq, existing_pin):
             project, version, _ = as_tuple(existing_pin)
             return make_install_requirement(
-                project, version, ireq.extras, constraint=ireq.constraint
+                project, version, ireq.extras, ireq.markers,
+                constraint=ireq.constraint
             )
         else:
             return self.repository.find_best_match(ireq, prereleases)
diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index ef5ba4e..8f74271 100644
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -2,28 +2,48 @@
 from __future__ import absolute_import, division, print_function, unicode_literals
 
 import collections
+import copy
 import hashlib
 import os
 from contextlib import contextmanager
 from shutil import rmtree
 
-from pip._internal.cache import WheelCache
-from pip._internal.commands import create_command
-from pip._internal.models.index import PyPI
-from pip._internal.models.link import Link
-from pip._internal.models.wheel import Wheel
-from pip._internal.req import RequirementSet
-from pip._internal.req.req_tracker import get_requirement_tracker
-from pip._internal.utils.hashes import FAVORITE_HASH
-from pip._internal.utils.misc import normalize_path
-from pip._internal.utils.temp_dir import TempDirectory, global_tempdir_manager
-from pip._internal.utils.urls import path_to_url, url_to_path
-
-from .._compat import PIP_VERSION, TemporaryDirectory, contextlib
+from pip_shims.shims import (
+    TempDirectory,
+    global_tempdir_manager,
+    get_requirement_tracker,
+    InstallCommand
+)
+from packaging.requirements import Requirement
+from packaging.specifiers import Specifier, SpecifierSet
+
+from .._compat import (
+    FAVORITE_HASH,
+    PIP_VERSION,
+    InstallationError,
+    InstallRequirement,
+    Link,
+    normalize_path,
+    PyPI,
+    RequirementSet,
+    RequirementTracker,
+    SafeFileCache,
+    TemporaryDirectory,
+    VcsSupport,
+    Wheel,
+    WheelCache,
+    contextlib,
+    path_to_url,
+    pip_version,
+    url_to_path,
+)
+from ..locations import CACHE_DIR
 from ..click import progressbar
 from ..exceptions import NoCandidateFound
 from ..logging import log
 from ..utils import (
+    dedup,
+    clean_requires_python,
     fs_str,
     is_pinned_requirement,
     is_url_requirement,
@@ -32,10 +52,53 @@ from ..utils import (
 )
 from .base import BaseRepository
 
+os.environ["PIP_SHIMS_BASE_MODULE"] = str("pipenv.patched.notpip")
 FILE_CHUNK_SIZE = 4096
 FileStream = collections.namedtuple("FileStream", "stream size")
 
 
+class HashCache(SafeFileCache):
+    """Caches hashes of PyPI artifacts so we do not need to re-download them
+
+    Hashes are only cached when the URL appears to contain a hash in it and the cache key includes
+    the hash value returned from the server). This ought to avoid ssues where the location on the
+    server changes."""
+    def __init__(self, *args, **kwargs):
+        session = kwargs.pop('session')
+        self.session = session
+        kwargs.setdefault('directory', os.path.join(CACHE_DIR, 'hash-cache'))
+        super(HashCache, self).__init__(*args, **kwargs)
+
+    def get_hash(self, location):
+        # if there is no location hash (i.e., md5 / sha256 / etc) we on't want to store it
+        hash_value = None
+        vcs = VcsSupport()
+        orig_scheme = location.scheme
+        new_location = copy.deepcopy(location)
+        if orig_scheme in vcs.all_schemes:
+            new_location.url = new_location.url.split("+", 1)[-1]
+        can_hash = new_location.hash
+        if can_hash:
+            # hash url WITH fragment
+            hash_value = self.get(new_location.url)
+            if not hash_value and new_location.hash_name == FAVORITE_HASH:
+                hash_value = "{}:{}".format(FAVORITE_HASH, new_location.hash)
+                hash_value = hash_value.encode('utf8')
+        if not hash_value:
+            hash_value = self._get_file_hash(new_location) if not new_location.url.startswith("ssh") else None
+            hash_value = hash_value.encode('utf8') if hash_value else None
+        if can_hash:
+            self.set(new_location.url, hash_value)
+        return hash_value.decode('utf8') if hash_value else None
+
+    def _get_file_hash(self, location):
+        h = hashlib.new(FAVORITE_HASH)
+        with open_local_or_remote_file(location, self.session) as (fp, size):
+            for chunk in iter(lambda: fp.read(8096), b""):
+                h.update(chunk)
+        return ":".join([FAVORITE_HASH, h.hexdigest()])
+
+
 class PyPIRepository(BaseRepository):
     DEFAULT_INDEX_URL = PyPI.simple_url
 
@@ -46,21 +109,29 @@ class PyPIRepository(BaseRepository):
     changed/configured on the Finder.
     """
 
-    def __init__(self, pip_args, cache_dir):
+    def __init__(self, pip_args, cache_dir=CACHE_DIR, session=None, build_isolation=False, use_json=False):
+        self.build_isolation = build_isolation
+        self.use_json = use_json
+        self.cache_dir = cache_dir
+
         # Use pip's parser for pip.conf management and defaults.
         # General options (find_links, index_url, extra_index_url, trusted_host,
         # and pre) are deferred to pip.
-        self.command = create_command("install")
+        self.command = InstallCommand()
         self.options, _ = self.command.parse_args(pip_args)
+        if self.build_isolation is not None:
+            self.options.build_isolation = build_isolation
         if self.options.cache_dir:
             self.options.cache_dir = normalize_path(self.options.cache_dir)
 
         self.options.require_hashes = False
         self.options.ignore_dependencies = False
 
-        self.session = self.command._build_session(self.options)
+        if session is None:
+            session = self.command._build_session(self.options)
+        self.session = session
         self.finder = self.command._build_package_finder(
-            options=self.options, session=self.session
+            options=self.options, session=self.session, ignore_requires_python=True
         )
 
         # Caches
@@ -73,6 +144,10 @@ class PyPIRepository(BaseRepository):
         # of all secondary dependencies for the given requirement, so we
         # only have to go to disk once for each requirement
         self._dependencies_cache = {}
+        self._json_dep_cache = {}
+
+        # stores *full* path + fragment => sha256
+        self._hash_cache = HashCache(session=session)
 
         # Setup file paths
         self.freshen_build_caches()
@@ -114,13 +189,15 @@ class PyPIRepository(BaseRepository):
         if ireq.editable or is_url_requirement(ireq):
             return ireq  # return itself as the best match
 
-        all_candidates = self.find_all_candidates(ireq.name)
+        all_candidates = clean_requires_python(self.find_all_candidates(ireq.name))
         candidates_by_version = lookup_table(
             all_candidates, key=lambda c: c.version, unique=True
         )
-        matching_versions = ireq.specifier.filter(
-            (candidate.version for candidate in all_candidates), prereleases=prereleases
-        )
+        try:
+            matching_versions = ireq.specifier.filter((candidate.version for candidate in all_candidates),
+                                                      prereleases=prereleases)
+        except TypeError:
+            matching_versions = [candidate.version for candidate in all_candidates]
 
         # Reuses pip's internal candidate sort key to sort
         matching_candidates = [candidates_by_version[ver] for ver in matching_versions]
@@ -136,9 +213,66 @@ class PyPIRepository(BaseRepository):
             best_candidate.name,
             best_candidate.version,
             ireq.extras,
+            ireq.markers,
             constraint=ireq.constraint,
         )
 
+    def get_dependencies(self, ireq):
+        json_results = set()
+
+        if self.use_json:
+            try:
+                json_results = self.get_json_dependencies(ireq)
+            except TypeError:
+                json_results = set()
+
+        legacy_results = self.get_legacy_dependencies(ireq)
+        json_results.update(legacy_results)
+
+        return json_results
+
+    def get_json_dependencies(self, ireq):
+
+        if not (is_pinned_requirement(ireq)):
+            raise TypeError('Expected pinned InstallRequirement, got {}'.format(ireq))
+
+        def gen(ireq):
+            if self.DEFAULT_INDEX_URL not in self.finder.index_urls:
+                return
+
+            url = 'https://pypi.org/pypi/{0}/json'.format(ireq.req.name)
+            releases = self.session.get(url).json()['releases']
+
+            matches = [
+                r for r in releases
+                if '=={0}'.format(r) == str(ireq.req.specifier)
+            ]
+            if not matches:
+                return
+
+            release_requires = self.session.get(
+                'https://pypi.org/pypi/{0}/{1}/json'.format(
+                    ireq.req.name, matches[0],
+                ),
+            ).json()
+            try:
+                requires_dist = release_requires['info']['requires_dist']
+            except KeyError:
+                return
+
+            for requires in requires_dist:
+                i = InstallRequirement.from_line(requires)
+                if 'extra' not in repr(i.markers):
+                    yield i
+
+        try:
+            if ireq not in self._json_dep_cache:
+                self._json_dep_cache[ireq] = [g for g in gen(ireq)]
+
+            return set(self._json_dep_cache[ireq])
+        except Exception:
+            return set()
+
     def resolve_reqs(self, download_dir, ireq, wheel_cache):
         with get_requirement_tracker() as req_tracker, TempDirectory(
             kind="resolver"
@@ -165,7 +299,7 @@ class PyPIRepository(BaseRepository):
                 wheel_cache=wheel_cache,
                 use_user_site=False,
                 ignore_installed=True,
-                ignore_requires_python=False,
+                ignore_requires_python=True,
                 force_reinstall=False,
                 upgrade_strategy="to-satisfy-only",
             )
@@ -173,10 +307,11 @@ class PyPIRepository(BaseRepository):
 
             if PIP_VERSION[:2] <= (20, 0):
                 reqset.cleanup_files()
+        results = set(results) if results else set()
 
-        return set(results)
+        return results, ireq
 
-    def get_dependencies(self, ireq):
+    def get_legacy_dependencies(self, ireq):
         """
         Given a pinned, URL, or editable InstallRequirement, returns a set of
         dependencies (also InstallRequirements, but not necessarily pinned).
@@ -212,9 +347,10 @@ class PyPIRepository(BaseRepository):
                 wheel_cache = WheelCache(self._cache_dir, self.options.format_control)
                 prev_tracker = os.environ.get("PIP_REQ_TRACKER")
                 try:
-                    self._dependencies_cache[ireq] = self.resolve_reqs(
+                    results, ireq = self.resolve_reqs(
                         download_dir, ireq, wheel_cache
                     )
+                    self._dependencies_cache[ireq] = results
                 finally:
                     if "PIP_REQ_TRACKER" in os.environ:
                         if prev_tracker:
@@ -252,7 +388,7 @@ class PyPIRepository(BaseRepository):
                     cached_link = Link(path_to_url(cached_path))
                 else:
                     cached_link = link
-                return {self._get_file_hash(cached_link)}
+                return {self._hash_cache._get_file_hash(cached_link)}
 
         if not is_pinned_requirement(ireq):
             raise TypeError("Expected pinned requirement, got {}".format(ireq))
@@ -260,38 +396,28 @@ class PyPIRepository(BaseRepository):
         # We need to get all of the candidates that match our current version
         # pin, these will represent all of the files that could possibly
         # satisfy this constraint.
-        all_candidates = self.find_all_candidates(ireq.name)
-        candidates_by_version = lookup_table(all_candidates, key=lambda c: c.version)
-        matching_versions = list(
-            ireq.specifier.filter((candidate.version for candidate in all_candidates))
-        )
-        matching_candidates = candidates_by_version[matching_versions[0]]
-
-        log.debug("  {}".format(ireq.name))
 
-        return {
-            self._get_file_hash(candidate.link) for candidate in matching_candidates
-        }
-
-    def _get_file_hash(self, link):
-        log.debug("    Hashing {}".format(link.url_without_fragment))
-        h = hashlib.new(FAVORITE_HASH)
-        with open_local_or_remote_file(link, self.session) as f:
-            # Chunks to iterate
-            chunks = iter(lambda: f.stream.read(FILE_CHUNK_SIZE), b"")
-
-            # Choose a context manager depending on verbosity
-            if log.verbosity >= 1:
-                iter_length = f.size / FILE_CHUNK_SIZE if f.size else None
-                context_manager = progressbar(chunks, length=iter_length, label="  ")
-            else:
-                context_manager = contextlib.nullcontext(chunks)
+        result = {}
+        with self.allow_all_links():
+            matching_candidates = (
+                c for c in clean_requires_python(self.find_all_candidates(ireq.name))
+                if c.version in ireq.specifier
+            )
+            log.debug("  {}".format(ireq.name))
+            result = {
+                h for h in
+                map(lambda c: self._hash_cache.get_hash(c.link), matching_candidates)
+                if h is not None
+            }
+        return result
 
-            # Iterate over the chosen context manager
-            with context_manager as bar:
-                for chunk in bar:
-                    h.update(chunk)
-        return ":".join([FAVORITE_HASH, h.hexdigest()])
+    @contextmanager
+    def allow_all_links(self):
+        try:
+            self.finder._ignore_compatibility = True
+            yield
+        finally:
+            self.finder._ignore_compatibility = False
 
     @contextmanager
     def allow_all_wheels(self):
diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
index 0116992..550069d 100644
--- a/pipenv/patched/piptools/resolver.py
+++ b/pipenv/patched/piptools/resolver.py
@@ -6,7 +6,9 @@ import os
 from functools import partial
 from itertools import chain, count
 
-from pip._internal.req.constructors import install_req_from_line
+from pip_shims.shims import install_req_from_line
+from pipenv.vendor.requirementslib.models.markers import normalize_marker_str
+from packaging.markers import Marker
 
 from . import click
 from .logging import log
@@ -33,6 +35,7 @@ class RequirementSummary(object):
         self.req = ireq.req
         self.key = key_from_ireq(ireq)
         self.extras = str(sorted(ireq.extras))
+        self.markers = ireq.markers
         self.specifier = str(ireq.specifier)
 
     def __eq__(self, other):
@@ -63,6 +66,17 @@ def combine_install_requirements(ireqs):
         if combined_ireq.req is not None and ireq.req is not None:
             combined_ireq.req.specifier &= ireq.req.specifier
         combined_ireq.constraint &= ireq.constraint
+        if ireq.markers and not combined_ireq.markers:
+            combined_ireq.markers = copy.deepcopy(ireq.markers)
+        elif ireq.markers and combined_ireq.markers:
+            _markers = []  # type: List[Marker]
+            for marker in [ireq.markers, combined_ireq.markers]:
+                if isinstance(marker, str):
+                    _markers.append(Marker(marker))
+                else:
+                    _markers.append(marker)
+            marker_str = " and ".join([normalize_marker_str(m) for m in _markers if m])
+            combined_ireq.markers = Marker(marker_str)
         # Return a sorted, de-duped tuple of extras
         combined_ireq.extras = tuple(
             sorted(set(tuple(combined_ireq.extras) + tuple(ireq.extras)))
@@ -337,10 +351,19 @@ class Resolver(object):
         if ireq.constraint:
             return
 
-        if ireq.editable or is_url_requirement(ireq):
+        if ireq.editable or (is_url_requirement(ireq) and not ireq.link.is_wheel):
             for dependency in self.repository.get_dependencies(ireq):
                 yield dependency
             return
+
+        # fix our malformed extras
+        if ireq.extras:
+            if getattr(ireq, "extra", None):
+                if ireq.extras:
+                    ireq.extras.extend(ireq.extra)
+                else:
+                    ireq.extras = ireq.extra
+
         elif not is_pinned_requirement(ireq):
             raise TypeError(
                 "Expected pinned or editable requirement, got {}".format(ireq)
@@ -358,7 +381,7 @@ class Resolver(object):
                 fg="yellow",
             )
             dependencies = self.repository.get_dependencies(ireq)
-            self.dependency_cache[ireq] = sorted(str(ireq.req) for ireq in dependencies)
+            self.dependency_cache[ireq] = sorted(set(format_requirement(ireq) for ireq in dependencies))
 
         # Example: ['Werkzeug>=0.9', 'Jinja2>=2.4']
         dependency_strings = self.dependency_cache[ireq]
@@ -374,7 +397,8 @@ class Resolver(object):
             )
 
     def reverse_dependencies(self, ireqs):
+        is_non_wheel_url = lambda r: is_url_requirement(r) and not r.link.is_wheel
         non_editable = [
-            ireq for ireq in ireqs if not (ireq.editable or is_url_requirement(ireq))
+            ireq for ireq in ireqs if not (ireq.editable or is_non_wheel_url(ireq))
         ]
         return self.dependency_cache.reverse_dependencies(non_editable)
diff --git a/pipenv/patched/piptools/scripts/compile.py b/pipenv/patched/piptools/scripts/compile.py
index 03232a8..f83b13e 100755
--- a/pipenv/patched/piptools/scripts/compile.py
+++ b/pipenv/patched/piptools/scripts/compile.py
@@ -7,8 +7,8 @@ import sys
 import tempfile
 
 from click.utils import safecall
-from pip._internal.commands import create_command
-from pip._internal.req.constructors import install_req_from_line
+from ._compat import InstallCommand
+from ._compat import install_req_from_line
 
 from .. import click
 from .._compat import parse_requirements
@@ -24,8 +24,8 @@ from ..writer import OutputWriter
 DEFAULT_REQUIREMENTS_FILE = "requirements.in"
 DEFAULT_REQUIREMENTS_OUTPUT_FILE = "requirements.txt"
 
-# Get default values of the pip's options (including options from pip.conf).
-install_command = create_command("install")
+# Get default values of the pip's options (including options from pipenv.patched.notpip.conf).
+install_command = InstallComand()
 pip_defaults = install_command.parser.get_default_values()
 
 
diff --git a/pipenv/patched/piptools/scripts/sync.py b/pipenv/patched/piptools/scripts/sync.py
index 137e813..4a7b3d5 100755
--- a/pipenv/patched/piptools/scripts/sync.py
+++ b/pipenv/patched/piptools/scripts/sync.py
@@ -6,8 +6,7 @@ import os
 import shlex
 import sys
 
-from pip._internal.commands import create_command
-from pip._internal.utils.misc import get_installed_distributions
+from ._compat import get_installed_distributions, InstallCommand
 
 from .. import click, sync
 from .._compat import parse_requirements
@@ -112,7 +111,7 @@ def cli(
             log.error("ERROR: " + msg)
             sys.exit(2)
 
-    install_command = create_command("install")
+    install_command = InstallCommand()
     options, _ = install_command.parse_args([])
     session = install_command._build_session(options)
     finder = install_command._build_package_finder(options=options, session=session)
diff --git a/pipenv/patched/piptools/sync.py b/pipenv/patched/piptools/sync.py
index 430b4bb..015ff7a 100644
--- a/pipenv/patched/piptools/sync.py
+++ b/pipenv/patched/piptools/sync.py
@@ -4,8 +4,8 @@ import sys
 import tempfile
 from subprocess import check_call  # nosec
 
-from pip._internal.commands.freeze import DEV_PKGS
-from pip._internal.utils.compat import stdlib_pkgs
+from ._compat import DEV_PKGS
+from ._compat import stdlib_pkgs
 
 from . import click
 from .exceptions import IncompatibleRequirements
diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
index 7733447..1123fb6 100644
--- a/pipenv/patched/piptools/utils.py
+++ b/pipenv/patched/piptools/utils.py
@@ -1,14 +1,19 @@
 # coding: utf-8
 from __future__ import absolute_import, division, print_function, unicode_literals
 
+import os
 import sys
 from collections import OrderedDict
 from itertools import chain, groupby
 
 import six
 from click.utils import LazyFile
-from pip._internal.req.constructors import install_req_from_line
+from ._compat import install_req_from_line
 from six.moves import shlex_quote
+from pipenv.vendor.packaging.specifiers import SpecifierSet, InvalidSpecifier
+from pipenv.vendor.packaging.version import Version, InvalidVersion, parse as parse_version
+from pipenv.vendor.packaging.markers import Marker, Op, Value, Variable
+
 
 from ._compat import PIP_VERSION
 from .click import style
@@ -25,6 +30,70 @@ COMPILE_EXCLUDE_OPTIONS = {
 }
 
 
+def simplify_markers(ireq):
+    """simplify_markers "This code cleans up markers for a specific :class:`~InstallRequirement`"
+
+    Clean and deduplicate markers.
+
+    :param ireq: An InstallRequirement to clean
+    :type ireq: :class:`~pip._internal.req.req_install.InstallRequirement`
+    :return: An InstallRequirement with cleaned Markers
+    :rtype: :class:`~pip._internal.req.req_install.InstallRequirement`
+    """
+
+    if not getattr(ireq, 'markers', None):
+        return ireq
+    markers = ireq.markers
+    marker_list = []
+    if isinstance(markers, six.string_types):
+        if ';' in markers:
+            markers = [Marker(m_str.strip()) for m_str in markers.split(';')]
+        else:
+            markers = Marker(markers)
+    for m in markers._markers:
+        _single_marker = []
+        if isinstance(m[0], six.string_types):
+            continue
+        if not isinstance(m[0], (list, tuple)):
+            marker_list.append(''.join([_piece.serialize() for _piece in m]))
+            continue
+        for _marker_part in m:
+            if isinstance(_marker_part, six.string_types):
+                _single_marker.append(_marker_part)
+                continue
+            _single_marker.append(''.join([_piece.serialize() for _piece in _marker_part]))
+        _single_marker = [_m.strip() for _m in _single_marker]
+        marker_list.append(tuple(_single_marker,))
+    marker_str = ' and '.join(list(dedup(tuple(marker_list,)))) if marker_list else ''
+    new_markers = Marker(marker_str)
+    ireq.markers = new_markers
+    new_ireq = install_req_from_line(format_requirement(ireq))
+    if ireq.constraint:
+        new_ireq.constraint = ireq.constraint
+    return new_ireq
+
+
+def clean_requires_python(candidates):
+    """Get a cleaned list of all the candidates with valid specifiers in the `requires_python` attributes."""
+    all_candidates = []
+    py_version = parse_version(os.environ.get('PIPENV_REQUESTED_PYTHON_VERSION', '.'.join(map(str, sys.version_info[:3]))))
+    for c in candidates:
+        if getattr(c, "requires_python", None):
+            # Old specifications had people setting this to single digits
+            # which is effectively the same as '>=digit,<digit+1'
+            if len(c.requires_python) == 1 and c.requires_python in ("2", "3"):
+                c.requires_python = '>={0},<{1!s}'.format(c.requires_python, int(c.requires_python) + 1)
+            try:
+                specifierset = SpecifierSet(c.requires_python)
+            except InvalidSpecifier:
+                continue
+            else:
+                if not specifierset.contains(py_version):
+                    continue
+        all_candidates.append(c)
+    return all_candidates
+
+
 def key_from_ireq(ireq):
     """Get a standardized key for an InstallRequirement."""
     if ireq.req is None and ireq.link is not None:
@@ -50,16 +119,51 @@ def comment(text):
     return style(text, fg="green")
 
 
-def make_install_requirement(name, version, extras, constraint=False):
+def make_install_requirement(name, version, extras, markers, constraint=False):
     # If no extras are specified, the extras string is blank
     extras_string = ""
     if extras:
         # Sort extras for stability
         extras_string = "[{}]".format(",".join(sorted(extras)))
 
-    return install_req_from_line(
-        str("{}{}=={}".format(name, extras_string, version)), constraint=constraint
-    )
+    if not markers:
+        return install_req_from_line(
+            str('{}{}=={}'.format(name, extras_string, version)),
+            constraint=constraint)
+    else:
+        return install_req_from_line(
+            str('{}{}=={}; {}'.format(name, extras_string, version, str(markers))),
+            constraint=constraint)
+
+
+def _requirement_to_str_lowercase_name(requirement):
+    """
+    Formats a packaging.requirements.Requirement with a lowercase name.
+
+    This is simply a copy of
+    https://github.com/pypa/pipenv/patched/pipenv/patched/packaging/blob/pipenv/patched/pipenv/patched/16.8/packaging/requirements.py#L109-L124
+    modified to lowercase the dependency name.
+
+    Previously, we were invoking the original Requirement.__str__ method and
+    lowercasing the entire result, which would lowercase the name, *and* other,
+    important stuff that should not be lowercased (such as the marker). See
+    this issue for more information: https://github.com/pypa/pipenv/patched/pipenv/patched/pipenv/issues/2113.
+    """
+    parts = [requirement.name.lower()]
+
+    if requirement.extras:
+        parts.append("[{0}]".format(",".join(sorted(requirement.extras))))
+
+    if requirement.specifier:
+        parts.append(str(requirement.specifier))
+
+    if requirement.url:
+        parts.append("@ {0}".format(requirement.url))
+
+    if requirement.marker:
+        parts.append("; {0}".format(requirement.marker))
+
+    return "".join(parts)
 
 
 def is_url_requirement(ireq):
@@ -77,13 +181,15 @@ def format_requirement(ireq, marker=None, hashes=None):
     """
     if ireq.editable:
         line = "-e {}".format(ireq.link.url)
+    elif ireq.link and ireq.link.is_vcs:
+        line = str(ireq.req)
     elif is_url_requirement(ireq):
         line = ireq.link.url
     else:
-        line = str(ireq.req).lower()
+        line = _requirement_to_str_lowercase_name(ireq.req)
 
-    if marker:
-        line = "{} ; {}".format(line, marker)
+    if marker and ';' not in line:
+        line = "{}; {}".format(line, marker)
 
     if hashes:
         for hash_ in sorted(hashes):
